plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'kotlin-android'
    id 'kotlin-parcelize'

}


group = 'com.github.Tap-Payments'
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--always'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}
android {
    compileSdkVersion 36

    namespace 'company.tap.tapbenefitpay'

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 36
        versionCode 1
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

}

dependencies {
    api 'androidx.webkit:webkit:1.11.0'
    def lifecycle_version = "2.6.2"

    api "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"
    api 'androidx.core:core-ktx:1.13.1'
    api 'androidx.appcompat:appcompat:1.6.1'
    api 'com.google.android.material:material:1.12.0'
    api 'androidx.constraintlayout:constraintlayout:2.1.4'
   api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.44'
    api 'com.google.code.gson:gson:2.10'
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.6.2"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    api 'com.intuit.sdp:sdp-android:1.1.0'
    api 'com.github.Tap-Payments:CommonDataModelsWeb-Andriod:0.0.15'
    api 'androidx.lifecycle:lifecycle-process:2.6.2'
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"



}




// ---- Javadoc task (variant-aware) ----
task releaseJavadoc(type: Jar) {
    archiveClassifier.set('javadoc')
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
}

// ---- Source Jar task ----
task releaseSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
}

afterEvaluate {
    // ✅ Safe API for AGP 8.x
    android.libraryVariants.all { variant ->
        variant.mergeResourcesProvider.configure { mergeTask ->
            doLast {
                def resDir = mergeTask.outputDir.get().asFile
                def valuesDir = new File(resDir, "values")

                def dimensFile = new File(valuesDir, "dimens_sdp.xml")
                if (dimensFile.exists()) {
                    def updated = dimensFile.getText("UTF-8")
                            .replaceAll('name="_', 'name="tap_') // rename resources
                    dimensFile.write(updated, "UTF-8")
                }
            }
        }
    }

    publishing {
        publications {
            create("release", MavenPublication) {
                // ✅ Publish compiled AAR
                from components.release

                groupId = "com.github.Tap-Payments"
                artifactId = "benfitpay-sdk"
                version = android.defaultConfig.versionName ?: "1.0.4"

                // ✅ Attach sources + javadoc
                artifact(tasks.named("releaseSourcesJar"))
                artifact(tasks.named("releaseJavadoc"))

                // ✅ Export api dependencies to POM
                pom {
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.api.allDependencies.each { dep ->
                            if (dep.group != null && dep.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dep.group)
                                dependencyNode.appendNode('artifactId', dep.name)
                                dependencyNode.appendNode('version', dep.version)
                                dependencyNode.appendNode('scope', 'compile')
                            }
                        }
                    }
                }
            }
        }
    }

    // ✅ Ensure metadata waits for sources/javadoc
    tasks.named("generateMetadataFileForReleasePublication") {
        dependsOn(tasks.named("releaseSourcesJar"))
        dependsOn(tasks.named("releaseJavadoc"))
    }
}


